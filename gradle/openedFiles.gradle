import edu.ucar.build.OpenedFilesListener
import edu.ucar.build.tasks.FilterOpenedFilesTask

ext.reportOnFilesOpenedByTests = true

if (!reportOnFilesOpenedByTests) {
    return
}

configure(testedProjects) {
    afterEvaluate {  // We query which plugins have been applied, so must wait until after project evaluation.
        configurations {
            testAgent { transitive = false } // See note below.
        }

        dependencies {
            // We want to instrument the Gradle test executor JVM with file-leak-detector. We do this by using
            // the -javaagent switch (see https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/
            // package-summary.html#package.description). The switch requires that the agent and its dependencies
            // be contained within a single jar.
            //
            // Luckily, a fat jar is available on Maven Central. We add it to its own configuration (testAgent)
            // that is NON-transitive. Non-transitivity is important because the Gradle dependency machinery is
            // processing the regular (and only) file-leak-detector POM. That POM assumes usage of the skinny jar
            // and declares dependencies that we don't need because they're already packaged in the fat jar.
            testAgent libraries["file-leak-detector-fatJar"]

            // Add the classes from :buildSrc to the testRuntime classpath. Specifically, we need to make
            // edu.ucar.build.OpenedFileList available to the test JVM. Given that the output of :buildSrc is
            // implicitly added to the buildscript classpaths of other subprojects, you'd think there'd be a less
            // kludgy way to accomplish this, but apparently not: http://stackoverflow.com/questions/22633813.
            // In any event, :buildSrc:assemble is guaranteed to have run by this point in the build, so the
            // addition is safe.
            testRuntime rootProject.files('buildSrc/build/classes/main')
        }

        File openedFilesReport = file("${testReportDir}/opened-files-report.ser.gz")

        tasks.withType(Test).all {
            outputs.file openedFilesReport
            systemProperties[OpenedFilesListener.REPORT_FILE_KEY] = openedFilesReport

            // Delay resolution of testAgent configuration until execution phase. This avoids the error:
            // "Cannot change dependencies of configuration $name after it has been resolved" in
            // dependencies.gradle.
            doFirst {
                // set arguments for the test executor JVM.
                jvmArgs "-javaagent:${configurations.testAgent.singleFile}=" +
                        "listener=${OpenedFilesListener.name}"  // From :buildSrc
            }
        }

        task filterFilesOpenedByTests(type: FilterOpenedFilesTask, group: 'Verification') {
            filter openedFilesReport

            hitsDestFile = file("${testReportDir}/opened-files-report-hits.txt")
            missesDestFile = file("${testReportDir}/opened-files-report-misses.txt")

            if (isCdmUnitTestDirAvailable) {
                reportOnOpenedFiles fileTree(new File(System.properties[testdataDirKey]))
            }

            if (plugins.hasPlugin('java')) {
                reportOnSourceFiles sourceSets.test.java
            }
            if (plugins.hasPlugin('groovy')) {
                reportOnSourceFiles sourceSets.test.groovy
            }

            openedFilesIgnorePatterns << ~/.+\.jar$/
            openedFilesIgnorePatterns << ~/.+\.class$/
        }
    }
}

///////////////////////////////////////////////// Root task /////////////////////////////////////////////////

gradle.projectsEvaluated {
    Set<Task> subprojectFilterTasks = subprojects*.tasks*.withType(FilterOpenedFilesTask).flatten()

    task filterFilesOpenedByAllTests(type: FilterOpenedFilesTask, group: 'Verification') {
        filter subprojectFilterTasks*.recordsFiles.flatten()

        hitsDestFile = file("$buildDir/reports/allTests/opened-files-report-hits.txt")
        missesDestFile = file("$buildDir/reports/allTests/opened-files-report-misses.txt")

        if (isCdmUnitTestDirAvailable) {
            reportOnOpenedFiles fileTree(new File(System.properties[testdataDirKey]))
        }

        reportOnSourceFiles subprojectFilterTasks*.sourceFilesToReportOn

        openedFilesIgnorePatterns << ~/.+\.jar$/
        openedFilesIgnorePatterns << ~/.+\.class$/

        openedFilesIgnorePatterns << ~/.+\.gbx9$/
        openedFilesIgnorePatterns << ~/.+\.ncx4$/
    }
}
